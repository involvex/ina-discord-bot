# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, goverfl0w
# This file is distributed under the same license as the interactions.py
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: interactions.py 4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-26 11:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../faq.rst:2
msgid "Frequently Asked Questions"
msgstr ""

#: ../../faq.rst:4
msgid ""
"Got a question about our library? Well, your answer is probably laying "
"somewhere around here."
msgstr ""

#: ../../faq.rst:8
msgid ""
"This page is maintained by the Helpers of the Discord server, and "
"developers at their discretion. For any comments, feedback or concerns, "
"please consider joining our `Discord Server`_ and bringing it up in our "
"support channels."
msgstr ""

#: ../../faq.rst:15
msgid ""
"The current state of discord.py and its further development is unclear. "
"What about your library?"
msgstr ""

#: ../../faq.rst:16
msgid ""
"We have no plans on stopping development and will be available for you. "
"If you have any questions about the internal development, feel free to "
"ask in the Discord support server."
msgstr ""

#: ../../faq.rst:21
msgid "Are you going to/will/consider fork(ing) discord.py?"
msgstr ""

#: ../../faq.rst:22
msgid "The short answer is: **no**."
msgstr ""

#: ../../faq.rst:24
msgid ""
"The long answer is a list of numerous reasons as to why this decision was"
" made:"
msgstr ""

#: ../../faq.rst:26
msgid ""
"There are/will be numerous forks out there for discord.py, and because of"
" that, we cannot safely guarantee our ability to help users out who may "
"be using their own form of modified code."
msgstr ""

#: ../../faq.rst:27
msgid ""
"The original purpose of this library was to act as an extension of "
"discord.py, but due to the issue of constantly having to monkeypatch "
"solutions into their codebase to keep our library working introduced "
"extreme technical debt. Forking discord.py and building off of it does "
"not change anything from our issue of avoiding this."
msgstr ""

#: ../../faq.rst:28
msgid ""
"The goal of this library is to solely implement support and integrate the"
" use of interactions from the Discord API. Making this library unique in "
"a sense that we only do this seemed reasonable and within our margin of "
"standards at the time."
msgstr ""

#: ../../faq.rst:29
msgid ""
"The message intent will inevitably be forced as a privileged intent in "
"April 2022. The practicality of trying to support message commands will "
"be infeasible since Discord Developers have `already admitted`_ that "
"\"not wanting to implement application commands\" will not be a valid "
"reason for applying for this privileged intent."
msgstr ""

#: ../../faq.rst:30
msgid ""
"Forking discord.py would be a massive change to our current codebase, "
"throwing away all of the effort we've put into it so far, and basically "
"just be rewriting how v2.0a was created. That would make it nothing more "
"than discord.py-interactions at that point -- plus, we're already a "
"library that keeps very similar naming conventions as discord.py does, so"
" this is pointless."
msgstr ""

#: ../../faq.rst:34
msgid "Will discord.py be able to work with this library?"
msgstr ""

#: ../../faq.rst:35
msgid "The short answer is: **yes.**"
msgstr ""

#: ../../faq.rst:38
msgid ""
"Even if it is working, we strongly advise against using d.py with our "
"library."
msgstr ""

#: ../../faq.rst:40
msgid ""
"Additionally, we **will not** give help for any issue resulting from "
"using d.py with our library except of \"Do not use discord.py\"."
msgstr ""

#: ../../faq.rst:44
msgid ""
"However, the term \"work\" is loosely structured here. Imagine it like "
"taping a hole in the wall instead of repairing the wall. We're "
"essentially \"plastering\" support for discord.py instead of doing the "
"surgery on its internal organs to make it work well with our library. As "
"it currently stands, **interactions.py and discord.py** are API wrappers."
" You will be able to run code *alongside* one another, and you will be "
"able to plug in some classes, but the data conversion **must be exact.**"
msgstr ""

#: ../../faq.rst:49
msgid "What does that mean? Well, we'll show you:"
msgstr ""

#: ../../faq.rst:78
msgid ""
"Both of these variables ``interactions`` and ``dpy`` will be able to run "
"in the same established environment, and additionally will both function "
"properly as their respective libraries intend them to. This "
"implementation uses asyncio.gather to execute both starts simultaneously "
"as asyncio tasks, and runs them under one singular loop."
msgstr ""

#: ../../faq.rst:82
msgid ""
"Compared to traditional startup commands, ``interactions.ready()`` and "
"``dpy.start()`` is used instead of the typical ``interactions.start()`` "
"and ``dpy.run()`` methods because of synchronous/async functions. "
"``asyncio.gather()`` works with coroutines, hence the transition."
msgstr ""

#: ../../faq.rst:86
msgid "What about the models, though? That's a simple answer:"
msgstr ""

#: ../../faq.rst:101
msgid ""
"Both of these will be able to both run and give their proper value. It is"
" *very* important to note here, though, that you **must** be returning "
"back the exact same information that our objects depend on. A missing "
"class instance can easily lead to it breaking, hence the \"plastering\" "
"that is going on here."
msgstr ""

#: ../../faq.rst:107
msgid "Where should we go with discord.py being gone?"
msgstr ""

#: ../../faq.rst:108
msgid ""
"The most *biased* answer would be to, of course, *use interactions.py.* "
"We already offer a lot of the integral API wrapper aspects as discord.py "
"does, however, we only specialize in interactions. Which means things "
"such as these won't be supported by our core library itself (but might be"
" available as :ref:`Extension Libraries <faq:Extension libraries>`):"
msgstr ""

#: ../../faq.rst:112
msgid "Cooldowns"
msgstr ""

#: ../../faq.rst:113
msgid "Message commands"
msgstr ""

#: ../../faq.rst:114
msgid "Voice clients"
msgstr ""

#: ../../faq.rst:116
msgid ""
"There are other libraries of course though. As a general rule of thumb, "
"if you're looking to do mainly slash commands and that tidbit then we "
"highly recommend using our library, especially as **discord-components** "
"merges as of version 4.0. But if you want something way more open and "
"versatile, then we recommend these sources:"
msgstr ""

#: ../../faq.rst:120
msgid "`Pycord`_ (the most actively maintained)."
msgstr ""

#: ../../faq.rst:121
msgid "`NAFF`_ (high level, \"hackable\" API wrapper with ease of modification)."
msgstr ""

#: ../../faq.rst:122
msgid "`nextcord`_ (more abstract and fast approach to the Discord API)."
msgstr ""

#: ../../faq.rst:124
msgid ""
"It's personally recommended from the library developer to seek these "
"paths instead of sticking to an older version of a library, e.g. "
"discord.py 1.7.3 or 2.0.0a as they can eventually become deprecated with "
"more pending changes to the API by Discord engineers."
msgstr ""

#: ../../faq.rst:129
msgid "Why are you not supporting cooldowns?"
msgstr ""

#: ../../faq.rst:130
msgid ""
"Cooldowns aren't really an actual feature of the Discord API itself, but "
"rather more of a convenient feature implemented in discord.py in order to"
" avoid spamming of commands."
msgstr ""

#: ../../faq.rst:133
msgid "**What if people spam slash/sub commands?**"
msgstr ""

#: ../../faq.rst:135
msgid ""
"That's the neat part: it's really hard to do that, and most of the time, "
"they won't. Unless they copy the exact string that was used when you open"
" up the UI element to do it numerous times, most users do and will not be"
" able to know how to do this. However, if you as a bot developer feel at "
"unease about this, you are more than welcome to implement your own "
"cooldown methods yourself. Cooldowns were an ultimatum that came as the "
"result of message commands being able to be spam-able, and since we won't"
" be supporting them, there's no feasibility to having them in our "
"library."
msgstr ""

#: ../../faq.rst:143
msgid "Will we not be able to create message commands?"
msgstr ""

#: ../../faq.rst:144
msgid ""
"This is a tricky question to really answer. If you want the *technical* "
"answer: you can definitely create them with our library, however, you'll "
"have to program them in the ``on_message_create`` listener event that we "
"use. This is already something a majority of discord.py bot developers "
"frown upon doing, so this is at your own risk to code your own command "
"handlers into it. Luckily, you can take a page out of discord.js' book if"
" you want to do this, since they've never heard of an external command "
"handler framework before in their entire life."
msgstr ""

#: ../../faq.rst:152
msgid "Extension Libraries"
msgstr ""

#: ../../faq.rst:153
msgid "A list of all official extensions can be found `on our github page`_"
msgstr ""

#: ../../faq.rst:155
msgid "Those are (at the moment):"
msgstr ""

#: ../../faq.rst:157
msgid ""
"`voice client`_ - which is still WIP, but it is able to listen for the "
"``VOICE_STATE_UPDATE`` event."
msgstr ""

#: ../../faq.rst:158
msgid "`autosharder`_ for automatic sharding"
msgstr ""

#: ../../faq.rst:159
msgid ""
"`wait_for`_ allows listening and waiting for a specific event or a "
"component inside a function"
msgstr ""

#: ../../faq.rst:160
msgid "`files`_ for file sending with ctx"
msgstr ""

#: ../../faq.rst:161
msgid "`Molter`_ for message commands"
msgstr ""

#: ../../faq.rst:162
msgid "`enhanced`_ which enhances the DX in general"
msgstr ""

#: ../../faq.rst:163
msgid "`paginator`_ for paginating embeds on messages using components"
msgstr ""

#: ../../faq.rst:164
msgid ""
"`persistence`_ for storing data inside your custom IDs (as an alternative"
" to ``wait_for``)"
msgstr ""

#: ../../faq.rst:165
msgid "`lavalink`_ for voice sending and listening ``VOICE_STATE_UPDATE`` event"
msgstr ""

#: ../../faq.rst:166
msgid "`fastapi`_ for building own API"
msgstr ""

#: ../../faq.rst:167
msgid "And a `boilerplate`_"
msgstr ""

#: ../../faq.rst:169
msgid ""
"Below are a few unofficial exts (for the time being) which implement some"
" functionality similar to what d.py had:"
msgstr ""

#: ../../faq.rst:171
msgid "`checks and cooldowns`_"
msgstr ""

#: ../../faq.rst:172
msgid "`tasks`_"
msgstr ""

#: ../../faq.rst:174
msgid "Usage examples can usually be found at the linked page"
msgstr ""

#: ../../faq.rst:178
msgid "Can I make an Extension Library myself?"
msgstr ""

#: ../../faq.rst:179
msgid ""
"Yeah, you can! We have a special channel reserved for the development of "
"external libraries! You can also read `this <https://github.com"
"/interactions-py/library/discussions/700>`_ for more information."
msgstr ""

#: ../../faq.rst:184
msgid ""
"I'm getting \"``AttributeError: HTTPClient not found!``\" when I try to "
"execute helper methods!"
msgstr ""

#: ../../faq.rst:185
msgid "Probably you are doing something like this:"
msgstr ""

#: ../../faq.rst:192
msgid ""
"And the error occurs in the line where you try to send something. You can"
" fix this easy by adding one argument:"
msgstr ""

#: ../../faq.rst:199
msgid ""
"You have to add this extra argument for every object you instantiate by "
"yourself if you want to use it's methods"
msgstr ""

#: ../../faq.rst:203
msgid ""
"Context and Messages don't have the ``Channel`` and ``Guild`` attributes!"
" Why?"
msgstr ""

#: ../../faq.rst:204
msgid ""
"At the moment the Discord API does *not* include them into their "
"responses. You can get those object via the ``get_channel()`` and "
"``get_guild()`` methods of the Context and Message model."
msgstr ""

#: ../../faq.rst:209
msgid "\"``ctx.send got an unexpected keyword argument: files``\"! Why?"
msgstr ""

#: ../../faq.rst:210
msgid ""
"It is not supported due to an decision of the core developer team. There "
"are two ways to do it:"
msgstr ""

#: ../../faq.rst:213
msgid "Using ``await channel.send`` instead"
msgstr ""

#: ../../faq.rst:214
msgid "Using the `files`_ extension"
msgstr ""

#: ../../faq.rst:218
msgid "\"``ctx.send got an unexpected keyword argument: embed``\"! Why?"
msgstr ""

#: ../../faq.rst:219
msgid ""
"This is quite simple: The argument ``embed`` got deprecated by Discord. "
"The new naming is ``embeds``."
msgstr ""

#: ../../faq.rst:223
msgid "How can I check what exception happened during a request?"
msgstr ""

#: ../../faq.rst:224
msgid "We, unlike d.py, do not offer something like ``interactions.NotFound``."
msgstr ""

#: ../../faq.rst:226
msgid "Instead you have to do it like this:"
msgstr ""

#: ../../faq.rst:229
msgid ""
"This feature will be implemented with version 4.3 and is currently only "
"available on beta/unstable"
msgstr ""

#: ../../faq.rst:243
msgid ""
"You can additionally get the exact reason for why the exception occurred "
"with ``e.message`` or ``e.lookup(e.code)``"
msgstr ""

#: ../../faq.rst:247
msgid "My message content is always empty! How can I fix this?"
msgstr ""

#: ../../faq.rst:248
msgid ""
"This happens because you did not enable the intent for message content. "
"Enable it on the developer portal and add it into the ``Client`` "
"definition as the following: ``bot = interactions.Client(..., "
"intents=interactions.Intents.DEFAULT | "
"interactions.Intents.GUILD_MESSAGE_CONTENT)`` You do not have to use "
"``Intents.DEFAULT``, it can be any other intent(s) you need!"
msgstr ""

#: ../../faq.rst:255
msgid "Is there something like ``Cogs``?"
msgstr ""

#: ../../faq.rst:256
msgid ""
"Yes! Although, we call them ``Extensions``. Yeah, like :ref:`Extension "
"Libraries <faq:Extension libraries>`. This is because an extension "
"Library is basically the same thing as a downloadable \"cog\". This is "
"how you create an extension for yourself:"
msgstr ""

#: ../../faq.rst:284
msgid "It's nothing more than that."
msgstr ""

#: ../../faq.rst:286
msgid ""
"Since ``@bot.X`` decorators don't work in extensions, you have to use "
"these:"
msgstr ""

#: ../../faq.rst:288
msgid "For event listeners, use ``@interactions.extension_listener``"
msgstr ""

#: ../../faq.rst:289
msgid "For component listeners, use ``@interactions.extension_component``"
msgstr ""

#: ../../faq.rst:290
msgid "For modal listeners, use ``@interactions.extension_modal``"
msgstr ""

#: ../../faq.rst:291
msgid "For autocomplete listeners, use ``@interactions.extension_autocomplete``"
msgstr ""

#: ../../faq.rst:295
msgid ""
"``channel.members`` does not exist, how do I get the people in a voice "
"channel?"
msgstr ""

#: ../../faq.rst:296
msgid ""
"``channel.members`` actually does exist, but is reserved for threads. "
"There is no attribute for people in a voice channel by the API. The only "
"possible thing is to install the `voice client`_ extension and listen for"
" the ``VOICE_STATE_UPDATE`` event and then having a local cache that gets"
" updated when a member joins or leaves."
msgstr ""

#: ../../faq.rst:302
msgid "My question is not answered on here!"
msgstr ""

#: ../../faq.rst:303
msgid ""
"Please join our `Discord Server`_ for any further support regarding our "
"library and/or any integration code depending on it."
msgstr ""

#~ msgid ""
#~ "A `voice client`_ - which is still"
#~ " WIP, but it is able to listen"
#~ " for the ``VOICE_STATE_UPDATE`` event."
#~ msgstr ""

#~ msgid "An `autosharder`_ for automatic sharding"
#~ msgstr ""

#~ msgid "A `paginator`_ for paginating embeds on messages using components"
#~ msgstr ""

#~ msgid ""
#~ "`persistence`_ - for storing data inside"
#~ " your custom IDs (as an alternative"
#~ " to ``wait_for``)"
#~ msgstr ""

#~ msgid ""
#~ "`get`_ for getting objects from the "
#~ "discord API (will be implemented into"
#~ " the core library at a later "
#~ "time)"
#~ msgstr ""
