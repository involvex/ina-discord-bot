from collections import OrderedDict
from typing import Any, List, Type, Union

from ..models.command import ApplicationCommand, Interaction
from .models.channel import Channel
from .models.guild import Guild
from .models.member import Member
from .models.message import Message
from .models.role import Role
from .models.user import User

class Item(object):
    __slots__ = ("id", "value", "type")
    id: str
    value: Any
    type: Type
    def __init__(self, id: str, value: Any) -> None: ...

class Storage(OrderedDict):
    __slots__ = "values"
    values: List[Item]
    def __init__(self) -> None: ...
    def add(self, item: Item) -> List[Item]: ...

class Cache:
    dms: Storage = Storage()
    self_guilds: Storage = Storage()
    guilds: Storage = Storage()
    channels: Storage = Storage()
    roles: Storage = Storage()
    members: Storage = Storage()
    messages: Storage = Storage()
    users: Storage = Storage()
    interactions: Storage = Storage()
    def add_dm(self, dm: Channel) -> Item: ...
    def get_dm(self, id: str) -> Item: ...
    def add_self_guild(self, guild: Guild) -> Item: ...
    def get_self_guild(self, id: str) -> Item: ...
    def add_guild(self, guild: Guild) -> Item: ...
    def get_guild(self, id: str) -> Item: ...
    def add_channel(self, channel: Channel) -> Item: ...
    def get_channel(self, guild_id: str, channel_id: str) -> Item: ...
    def add_role(self, role: Role) -> Item: ...
    def get_role(self, guild_id: str, member_id: str, role_id: str) -> Item: ...
    def add_member(self, member: Member) -> Item: ...
    def get_member(self, guild_id: str, member_id: str) -> Item: ...
    def add_message(self, message: Message) -> Item: ...
    def get_message(self, guild_id: str, channel_id: str, message_id: str) -> Item: ...
    def add_user(self, user: User) -> Item: ...
    def get_user(self, id: str) -> Item: ...
    def get_interaction(self, id: str) -> Item: ...
    def add_interaction(
        self, id: str, interaction: Union[Interaction, ApplicationCommand]
    ) -> Item: ...
